parts:

  - name: Part 1
    intro: In this part we will setup a local cluster with minikube, deploy a public image from dockerhub, customize that image, and then finally deploy it inside our local cluster.
    steps:

      - cap: Start up the Kubernetes cluster with Minikube, giving it some extra resources.
        com: minikube start --memory 8000 --cpus 2 --vm-driver=virtualbox --kubernetes-version v1.11.10

      - cap: Enable the Minikube add-ons Heapster and Ingress.
        com: minikube addons enable heapster; minikube addons enable ingress

      - cap: View the Minikube Dashboard, a web UI for managing deployments.
        com: minikube service kubernetes-dashboard --namespace kube-system

      - cap: Deploy the public nginx image from DockerHub into a pod. Nginx is an open source web server that will automatically download from Docker Hub if it’s not available locally.
        com: kubectl run nginx --image nginx --port 80

      - cap: Create a K8s Service for the deployment. This will expose the nginx pod so you can access it with a web browser.
        com: kubectl expose deployment nginx --type NodePort --port 80

      - cap: Launch a web browser to test the service. The nginx welcome page displays, which means the service is up and running.
        com: minikube service nginx
        
      - cap: Delete the nginx deployment and service you created. 
        com: kubectl delete service nginx; kubectl delete deployment nginx

      - cap: Set up the cluster registry by applying a .yaml manifest file.
        com: kubectl apply -f manifests/registry.yaml

      - cap: Wait for the registry to finish deploying. Note that this may take several minutes.
        com: kubectl rollout status deployments/registry

      - cap: View the registry user interface in a web browser.
        com: minikube service registry-ui

      - cap: Let’s make a change to an HTML file in the cloned project. Open the /applications/hello-kenzan/index.html file in your favorite text editor (for example, you can use nano by running the command 'nano applications/hello-kenzan/index.html' in a separate terminal). Change some text inside one of the <p> tags. For example, change “Hello from Kenzan!” to “Hello from Me!”. Save the file. 
        com: echo ''

      - cap: Now let’s build an image, giving it a special name that points to our local cluster registry.
        com: docker build -t 127.0.0.1:30400/hello-kenzan:latest -f applications/hello-kenzan/Dockerfile applications/hello-kenzan

      - cap: We’ve built the image, but before we can push it to the registry, we need to set up a temporary proxy. By default the Docker client can only push to HTTP (not HTTPS) via localhost. To work around this, we’ll set up a Docker container that listens on 127.0.0.1:30400 and forwards to our cluster. First, build the image for our proxy container.
        com: docker build -t socat-registry -f applications/socat/Dockerfile applications/socat

      - cap: Now run the proxy container from the newly created image. (Note that you may see some errors; this is normal as the commands are first making sure there are no previous instances running.)
        com: docker stop socat-registry; docker rm socat-registry; docker run -d -e "REG_IP=`minikube ip`" -e "REG_PORT=30400" --name socat-registry -p 30400:5000 socat-registry

      - cap: With our proxy container up and running, we can now push our hello-kenzan image to the local repository.
        com: docker push 127.0.0.1:30400/hello-kenzan:latest

      - cap: The proxy’s work is done, so you can go ahead and stop it.
        com: docker stop socat-registry;

      - cap: With the image in our cluster registry, the last thing to do is apply the manifest to create and deploy the hello-kenzan pod based on the image.
        com: kubectl apply -f applications/hello-kenzan/k8s/manual-deployment.yaml

      - cap: Launch a web browser and view the service.
        com: minikube service hello-kenzan

      - cap: Delete the hello-kenzan deployment and service you created. 
        com: kubectl delete service hello-kenzan; kubectl delete deployment hello-kenzan
  
  - name: Part 2
    intro: In this part we will Setup Jenkins, and setup an automated pipeline to build, push and deploy our custom appliction.
    steps:

      - cap: Start up the Kubernetes cluster with Minikube. 
        com: minikube stop; minikube start --memory 8000 --cpus 2 --kubernetes-version v1.11.0

      - cap: Before we do anything, let's make sure the private registry deployment we've setup in the previous part is available.
        com: kubectl rollout status deployment/registry

      - cap: Let's build the Jenkins Docker image we'll use in our Kubernetes cluster. 
        com: docker build -t 127.0.0.1:30400/jenkins:latest -f applications/jenkins/Dockerfile applications/jenkins

      - cap: Once again we'll need to set up the Socat Registry proxy container to push images, so let's build it. Feel free to skip this step in case the socat-registry image already exists from Part 1 (to check, run `docker images` in a separate terminal). 
        com: docker build -t socat-registry -f applications/socat/Dockerfile applications/socat

      - cap: Run the proxy container from the image.
        com: docker stop socat-registry; docker rm socat-registry; docker run -d -e "REG_IP=`minikube ip`" -e "REG_PORT=30400" --name socat-registry -p 30400:5000 socat-registry; sleep 10

      - cap: With our proxy container up and running, we can now push our Jenkins image to the local repository.
        com: docker push 127.0.0.1:30400/jenkins:latest

      - cap: The proxy’s work is done, so you can go ahead and stop it.
        com: docker stop socat-registry

      - cap: Deploy Jenkins, which we’ll use to create our automated CI/CD pipeline. It will take the pod a minute or two to roll out.
        com: kubectl apply -f manifests/jenkins.yaml; kubectl rollout status deployment/jenkins

      - cap: Open the Jenkins UI in a web browser. 
        com: minikube service jenkins

      - cap: Display the Jenkins admin password with the following command, and right-click to copy it. IMPORTANT: BE CAREFUL NOT TO PRESS CTRL-C TO COPY THE PASSWORD AS THIS WILL STOP THE SCRIPT
        com: kubectl exec -it `kubectl get pods --selector=app=jenkins --output=jsonpath={.items..metadata.name}` cat /var/jenkins_home/secrets/initialAdminPassword

      - cap: Switch back to the Jenkins UI. Paste the Jenkins admin password in the box and click Continue. Click Install suggested plugins. Plugins have actually been pre-downloaded during the Jenkins image build, so this step should finish fairly quickly. 
        com: echo '' 

      - cap: Create an admin user and credentials, and click Save and Continue. (Make sure to remember these credentials as you will need them for repeated logins.) On the Instance Configuration page, click Save and Finish. On the next page, click Restart (if it appears to hang for some time on restarting, you may have to refresh the browser window). Login to Jenkins.
        com: echo ''

      - cap: Before we create a pipeline, we first need to provision the Kubernetes Continuous Deploy plugin with a kubeconfig file that will allow access to our Kubernetes cluster. In Jenkins on the left, click on Credentials, select the Jenkins store, then Global credentials (unrestricted), and Add Credentials on the left menu.
        com: echo ''

      - cap: The following values must be entered precisely as indicated: for the Kind field select the option `Kubernetes configuration (kubeconfig)`, set the ID as `kenzan_kubeconfig`, set Kubeconfig to `From a file on the Jenkins master`, and specify the the file path as `/var/jenkins_home/.kube/config`. Click the OK button.
        com: echo ''

      - cap: We now want to create a new pipeline for use with our Hello-Kenzan app. Back on Jenkins home, on the left, click New Item. Enter the item name as "Hello-Kenzan Pipeline", select Pipeline, and click OK.
        com: echo ''

      - cap: Under the Pipeline section at the bottom, change the Definition to be "Pipeline script from SCM". 
        com: echo ''

      - cap: Change the SCM to Git. Change the Repository URL to be the URL of your forked Git repository, such as https://github.com/[GIT USERNAME]/kubernetes-ci-cd. Click Save. On the left, click Build Now to run the new pipeline. 
        com: echo ''

      - cap: After all pipeline stages are colored green as complete, view the Hello-Kenzan application.
        com: minikube service hello-kenzan

      - cap: Push a change to your fork. Run the job again. View the changes.
        com: minikube service hello-kenzan
  name: Part 3
    intro: This part will have us setup the various applications that will present the crossword puzzle.  We will run a sample etcd cluster as a cache, a pages application containing the front-end, a crossword server using mongodb, and a monitoring and scaling server application. 
    steps:
    
      - cap: Initialize Helm. This will install Tiller (Helm's server) into our Kubernetes cluster. 
        com: helm init --wait --debug; kubectl rollout status deploy/tiller-deploy -n kube-system

      - cap: We will deploy the etcd operator onto the cluster using a Helm Chart. 
        com: helm install stable/etcd-operator --version 0.8.0 --name etcd-operator --debug --wait

      - cap: Deploy the etcd cluster and K8s Services for accessing the cluster. 
        com: kubectl create -f manifests/etcd-cluster.yaml; kubectl create -f manifests/etcd-service.yaml
      
      - cap: The crossword application is a multi-tier application whose services depend on each other. We will create three K8s Services so that the applications can communicate with one another.
        com: kubectl apply -f manifests/all-services.yaml
      
      - cap: Now we're going to walk through an initial build of the monitor-scale service.
        com: docker build -t 127.0.0.1:30400/monitor-scale:`git rev-parse --short HEAD` -f applications/monitor-scale/Dockerfile applications/monitor-scale

      - cap: Once again we'll need to set up the Socat Registry proxy container to push the monitor-scale image to our registry, so let's build it. Feel free to skip this step in case the socat-registry image already exists from Part 2 (to check, run `docker images` in a separate terminal). 
        com: docker build -t socat-registry -f applications/socat/Dockerfile applications/socat

      - cap: Run the proxy container from the newly created image.
        com: docker stop socat-registry; docker rm socat-registry; docker run -d -e "REG_IP=`minikube ip`" -e "REG_PORT=30400" --name socat-registry -p 30400:5000 socat-registry; sleep 10

      - cap: Push the monitor-scale image to the registry.
        com: docker push 127.0.0.1:30400/monitor-scale:`git rev-parse --short HEAD`

      - cap: The proxy’s work is done, so go ahead and stop it.
        com: docker stop socat-registry
      
      - cap: Open the registry UI and verify that the monitor-scale image is in our local registry.
        com: minikube service registry-ui
      
      - cap: Monitor-scale has the functionality to let us scale our puzzle app up and down through the Kr8sswordz UI, therefore we'll need to do some RBAC work in order to provide monitor-scale with the proper rights.
        com: kubectl apply -f manifests/monitor-scale-serviceaccount.yaml

      - cap: Create the monitor-scale deployment and the Ingress defining the hostname by which this service will be accessible to the other services. 
        com: sed 's#127.0.0.1:30400/monitor-scale:$BUILD_TAG#127.0.0.1:30400/monitor-scale:'`git rev-parse --short HEAD`'#' applications/monitor-scale/k8s/deployment.yaml | kubectl apply -f -
      
      - cap: Wait for the monitor-scale deployment to finish.
        com: kubectl rollout status deployment/monitor-scale

      - cap: View pods to see the monitor-scale pod running.
        com: kubectl get pods

      - cap: View services to see the monitor-scale service. 
        com: kubectl get services

      - cap: View ingress rules to see the monitor-scale ingress rule.
        com: kubectl get ingress

      - cap: View deployments to see the monitor-scale deployment.
        com: kubectl get deployments

      - cap: We will run a script to bootstrap the puzzle and mongo services, creating Docker images and storing them in the local registry. The puzzle.sh script runs through the same build, proxy, push, and deploy steps we just ran through manually for both services.
        com: scripts/puzzle.sh

      - cap: Check to see if the puzzle and mongo services have been deployed.
        com: kubectl rollout status deployment/puzzle; kubectl rollout status deployment/mongo

      - cap: Bootstrap the kr8sswordz frontend web application. This script follows the same build proxy, push, and deploy steps that the other services followed.
        com: scripts/kr8sswordz-pages.sh

      - cap: Check to see if the frontend has been deployed.
        com: kubectl rollout status deployment/kr8sswordz

      - cap: Check out all the pods that are running.
        com: kubectl get pods

      - cap: Start the web application in your default browser. You may have to refresh your browser so that the puzzle appears properly.
        com: minikube service kr8sswordz
  - name: Part 4
    intro: In this part we will return to our Jenkins instance and setup a pipeline for the kr8sswordz application.
    steps:

      - cap: Enter the following command to open the Jenkins UI in a web browser. Log in to Jenkins using the username and password you previously set up.  
        com: minikube service jenkins

      - cap: We’ll want to create a new pipeline for the puzzle service that we previously deployed. On the left in Jenkins, click New Item.
        com: echo ''
    
      - cap: Enter the item name as "Puzzle-Service", click Pipeline, and click OK.
        com: echo '' 

      - cap: Under the Build Triggers section, select Poll SCM. For the Schedule, enter the the string H/5 * * * * which will poll the Git repo every 5 minutes for changes. 
        com: echo ''

      - cap: In the Pipeline section, change the Definition to "Pipeline script from SCM". Set the SCM property to GIT. Set the Repository URL to your forked repo (created in Part 2), such as https://github.com/[GIT USERNAME]/kubernetes-ci-cd.git. Set the Script Path to applications/puzzle/Jenkinsfile 
        com: echo ''

      - cap: When you are finished, click Save. On the left, click Build Now to run the new pipeline. This will rebuild the image from the registry, and redeploy the puzzle pod. You should see it successfully run through the build, push, and deploy steps in a few minutes.
        com: echo ''

      - cap: View the Kr8sswordz application.
        com: minikube service kr8sswordz
        
      - cap: Spin up several instances of the puzzle service by moving the slider to the right and clicking Scale. For reference, click on the Submit button, noting that the white hit does not register on the puzzle services.
        com: echo ''

      - cap: Edit applications/puzzle/common/models/crossword.js in your favorite text editor (for example, you can use nano by running the command 'nano applications/puzzle/common/models/crossword.js' in a separate terminal). You'll see a commented section on lines 42-43 that indicates to uncomment a specific line. Uncomment line 43 by deleting the forward slashes and save the file. 
        com: echo ''

      - cap: Commit and push the change to your forked Git repo. 
        com: echo ''
      
      - cap: In Jenkins, open up the Puzzle-Service pipeline and wait until it triggers a build. It should trigger every 5 minutes.
        com: echo ''
 
      - cap: After it triggers, observe how the puzzle services disappear in the Kr8sswordz Puzzle app, and how new ones take their place.
        com: echo ''   
        
      - cap: Try clicking Submit to test that hits now register as white.
        com: echo ''  



